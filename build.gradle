plugins {
    // Apply the cpp-library plugin to add support for building C++ libraries
    id 'cpp-library'

    // Apply the cpp-unit-test plugin to add support for building and running C++ test executables
    id 'cpp-unit-test'

    id 'maven-publish'

    id 'base'
}

group 'ru.loginov'
version release_version

ext {
	sharedDir = file("/shared")
}

library {
    targetMachines = [
        machines.linux.x86,
        machines.linux.x86_64,
        machines.windows.x86, machines.windows.x86_64,
        machines.macOS.x86_64
    ]
}
publishing {
    repositories {
        maven {
            url sharedDir
        }
    }
}

task assembleRelease {}

task prepareArtifactRelease {
    dependsOn assembleRelease

    def buildVariantsFile = file('gradle_build_variants.json')
    if (buildVariantsFile.exists()) {
        def buildVariants = new groovy.json.JsonSlurper().parseText(buildVariantsFile.text)

		def artifactsFolder = file('build/artifacts')
		if (!artifactsFolder.exists()) {
			mkdir artifactsFolder
		}

		def tmpFolder = file('build/tmp/prepareArtifactRelease')
		if (!tmpFolder.exists()) {
			mkdir tmpFolder
		}

        def headersZipPath = 'build/headers/cpp-api-headers.zip'
        def headersZipFile = file(headersZipPath)
		def headersZip = zipTree(headersZipPath)

		def List<String> tasksNames = new ArrayList<>();

		buildVariants.variants.each { variant ->
			def buildFolderPath = file("build/lib/main/release/${variant.build_folder_path}")
			if (buildFolderPath.exists()) {
				def zipName = "kniit_lib_release_${variant.build_folder_path.replace('/','_')}"
				def preZipFolder = file("${tmpFolder}/${zipName}")
				if (preZipFolder.exists()) {
					delete preZipFolder
				}
				mkdir preZipFolder

				copy {
					buildVariants.include.each { filePath ->
						def includeFile = file(filePath)
						from includeFile
					}

					variant.include.each { filePath ->
                        def includeFile = file(filePath)
                    	from includeFile
                    }
					from buildFolderPath
					into preZipFolder
				}

                if (headersZipFile.exists()) {
                    copy {
                        from headersZip
                        into "${preZipFolder}/kniit_lib"
                    }
				}

				tasksNames.add("createZipArtifacts-${zipName}")

				task "createZipArtifacts-${zipName}"(type: Zip) {
					 archiveBaseName = zipName
					 archiveVersion = version
					 destinationDirectory = artifactsFolder
					 from "${preZipFolder}"
					 doLast {
					 }
				}
			}
		}

		task createZipArtifacts(dependsOn: tasksNames)
    }
}

afterEvaluate {project ->
    def buildVariantsFile = file('gradle_build_variants.json')
    if (buildVariantsFile.exists()) {
        def buildVariants = new groovy.json.JsonSlurper().parseText(buildVariantsFile.text)
        buildVariants.variants.each { variant ->
            def taskName = "assembleRelease${variant.variant_name}${variant.variant_architecture}"
            if (project.tasks.findByName(taskName)) {
                assembleRelease.dependsOn taskName
            }
        }
        project.ext.set('buildVariants', buildVariants)
    } else {
        println "Can not find file for build variants = gradle_build_variants.json"
    }

    assembleRelease.dependsOn cppHeaders
}